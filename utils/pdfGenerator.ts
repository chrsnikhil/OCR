import jsPDF from 'jspdf'

interface OCRResult {
  confidence: number
  text: string
  language: string
  wordCount: number
  characterCount: number
  processingTime: string
  detectedElements: string[]
}

interface PDFGenerationOptions {
  imageName: string
  imageUrl: string
  result: OCRResult
}

export const generatePDF = ({ imageName, imageUrl, result }: PDFGenerationOptions) => {
  const doc = new jsPDF()
  
  // Add title
  doc.setFontSize(20)
  doc.setFont('helvetica', 'bold')
  doc.text('OCR Analysis Report', 20, 30)
  
  // Add document info
  doc.setFontSize(12)
  doc.setFont('helvetica', 'normal')
  doc.text(`Document: ${imageName}`, 20, 50)
  doc.text(`Analysis Date: ${new Date().toLocaleDateString()}`, 20, 60)
  doc.text(`Processing Time: ${result.processingTime}`, 20, 70)
  
  // Add confidence score
  doc.setFont('helvetica', 'bold')
  doc.text('Confidence Score:', 20, 90)
  doc.setFont('helvetica', 'normal')
  doc.text(`${result.confidence}%`, 80, 90)
  
  // Add analysis details
  doc.setFont('helvetica', 'bold')
  doc.text('Analysis Details:', 20, 110)
  doc.setFont('helvetica', 'normal')
  doc.text(`Language: ${result.language}`, 20, 125)
  doc.text(`Word Count: ${result.wordCount}`, 20, 135)
  doc.text(`Character Count: ${result.characterCount}`, 20, 145)
  
  // Add detected elements
  doc.setFont('helvetica', 'bold')
  doc.text('Detected Elements:', 20, 165)
  doc.setFont('helvetica', 'normal')
  const elementsText = result.detectedElements.join(', ')
  const splitElements = doc.splitTextToSize(elementsText, 170)
  doc.text(splitElements, 20, 180)
  
  // Note: Extracted text section removed due to Unicode compatibility issues
  // The text can be viewed in the web interface instead
  
  // Add footer
  const pageCount = doc.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(8)
    doc.setFont('helvetica', 'italic')
    doc.text('Generated by Advanced OCR System', 20, doc.internal.pageSize.height - 10)
    doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 40, doc.internal.pageSize.height - 10)
  }
  
  // Generate filename
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-')
  const filename = `OCR_Report_${imageName.replace(/[^a-zA-Z0-9]/g, '_')}_${timestamp}.pdf`
  
  // Save the PDF
  doc.save(filename)
}

export const downloadPDF = (options: PDFGenerationOptions) => {
  try {
    generatePDF(options)
    return { success: true, message: 'PDF downloaded successfully' }
  } catch (error) {
    console.error('Error generating PDF:', error)
    return { success: false, message: 'Failed to generate PDF' }
  }
}
